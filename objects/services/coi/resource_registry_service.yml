name: resource_registry

docstring: |
  Service used to create, read, update and delete persistent resources
  (IonObjects).  Additionally, provides methods to manipulate
  resource associations and resource life cycle state.

spec: https://confluence.oceanobservatories.org/display/syseng/CIAD+COI+OV+Resource+Registry+Service

dependencies: []

methods:
  create:
    docstring: |
      Persist an instance of the resource passed in the object param.
      Returns a tuple (_id, _rev) for the persistend object.
    in:
      object: {}
    out:
      tuple: []

  read:
    docstring: |
      Read the latest, or optionally the specific, version of resource
      with id passed in the object_id param. Throws exception if
      object not found.
    in:
      object_id: ""
      rev_id: ""
    out:
      object: {}
    throws:
      NotFound: object with specified id does not exist

  update:
    docstring: |
      Persist new version of resource. Throws exception if previous
      version of object does not exist or object passed is not based
      on the latest persisted version.
    in:
      object: {}
    out:
      tuple: []
    throws:
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version
      BadRequest: lcstate was modified compared to persisted object version

  delete:
    docstring: |
      For now, permanently delete object and all previous versions of
      object. Throws exception if object does not exist.
    in:
      object: {}
    out:
    throws:
      NotFound: object does not exist

  # -----------------

  execute_lifecycle_transition:
    docstring: |
      Alter object lifecycle according to given transition event. Throws exception
      if resource object does not exist or given transition_event is unknown/illegal.
      The optional lcstate argument asserts that the current life cycle state matches.
      The new life cycle state after applying the transition is returned.
    in:
      resource_id: ""
      transition_event: ""
      current_lcstate: ""
    out:
      lcstate: ""
    throws:
      NotFound: resource object does not exist
      BadRequest: transition event unknown
      Inconsistent: resource not in current_state or transition illegal in current state
      Conflict: race condition while trying to update

  # -----------------

  create_association:
    docstring: |
      Create an association between subject and object resources (IonObjects).
      Subject and object values can be passed as actual object instances or just
      object ids.  Valid predicates can be found in res/config/associations.yml.
      Subject and object must be of the proper types for the predicate or
      an exception will be thrown.
    in:
      subject:
      predicate:
      object:
      assoc_type:
    out:
      tuple: []
    throws:
      NotFound: subject or object does not exist
      BadRequest: predicate is unknown or subject or object are invalid types for predicate
      

  delete_association:
    docstring: |
      For now, permanently delete an association between two resources (IonObjects).
      Throws exception if association does not exist.
    in:
      association: ""
    out:
    throws:
      NotFound: association does not exist

  # -----------------

  find_objects:
    docstring: |
        Find objects (or object ids) by association from a given subject or
        subject id (if str). Returns a tuple (list_of_objects, list_of_associations)
        if id_only == False, or (list_of_object_ids, list_of_associations)
        if id_only == True. Predicate and object_type are optional to narrow the
        search down. Object_type can only be set if predicate is set as well.
    in:
      subject: ""
      predicate: ""
      object_type: ""
      id_only: False
    out:
      list: []

  find_subjects:
    docstring: |
        Find subjects (or subject ids) by association from a given object or
        object id (if str). Returns a tuple (list_of_subjects, list_of_associations)
        if id_only == False, or (list_of_subject_ids, list_of_associations)
        if id_only == True. Predicate and subject_type are optional to narrow the
        search down. Subject_type can only be set if predicate is set as well.
    in:
      subject_type: ""
      predicate: ""
      object: ""
      id_only: False
    out:
      list: []

  find_associations:
    docstring: |
        Find associations by subject, predicate, object. Either subject and
        predicate have to be provided or predicate only. Returns either a list
        of associations or a list of association ids.
    in:
      subject: ""
      predicate: ""
      object: ""
      id_only: False
    out:
      list: []

  get_association:
    docstring: |
      Read the association specified by the exact subject, predicate, object
      tuple.  Throws exception if association not found or more than one
      association satisfies the tuple.
    in:
      subject: ""
      predicate: ""
      object: ""
    out:
      association: {}
    throws:
      NotFound: association does not exist
      Inconsistent: multiple associations satisfy the subject, predicate, object tuple

  find_resources:
    docstring: |
      Utility method for finding resources via various attributes, including resource type,
      life cycle state and name. Legal attribute combinations are:
        restype
        lcstate
        restype, lcstate
        name
        name, restype
      Returns a tuple (list_of_resources, list_of_matches) if id_only == False or
      (list_of_resource_ids, list_of_matches) otherwise. List_of_matches is a list of
      dicts with keys (type, lcstate, name, id), providing further information about the
      matching resources.
    in:
      restype: ""
      lcstate: ""
      name: ""
      id_only: False
    out:
      list: []
