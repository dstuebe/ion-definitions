# Data Acquisition Management Service interface definition

name: data_acquisition_management

docstring: |
  Services related to the transformation of data samples and engineering data into messages with metadata ready for
  publication as data product and ingestion into data archives. Service orchestrates data acquisition and processing by calling DM Distribution and Inventory services.

spec: https://confluence.oceanobservatories.org/display/syseng/CIAD+SA+OV+Data+Acquisition+Management+Service

dependencies: [resource_registry, pubsub_management]
methods:

  # -----------------
  # Manipulate external data providers
  create_external_data_provider:
    in:
      external_data_provider: !ExternalDataProvider
    out:
      external_data_provider_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute

  update_external_data_provider:
    in:
      external_data_provider: !ExternalDataProvider
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_external_data_provider:
    in:
      external_data_provider_id: ""
    out:
      external_data_provider: !ExternalDataProvider
    throws:
      NotFound: object with specified id does not exist

  delete_external_data_provider:
    in:
      external_data_provider_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  # -----------------
  # Manipulate data sources

  create_data_source:
    in:
      data_source: !DataSource
    out:
      data_source_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute

  update_data_source:
    in:
      data_source: !DataSource
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_data_source:
    in:
      data_source_id: ""
    out:
      data_source: !DataSource
    throws:
      NotFound: object with specified id does not exist

  delete_data_source:
    in:
      data_source_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist


  # -----------------
  # Manipulate external datasets
  create_external_dataset:
    in:
      external_dataset: !ExternalDataset
    out:
      external_dataset_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute

  update_external_dataset:
    in:
      external_dataset: !ExternalDataset
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_external_dataset:
    in:
      external_dataset_id: ""
    out:
      external_dataset: !ExternalDataset
    throws:
      NotFound: object with specified id does not exist

  delete_external_dataset:
    in:
      external_dataset_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist

  # -----------------
  # The following operations assign and unassign data agents

  assign_data_agent:
    docstring: Connect the agent instance description with a data source
    in:
      data_source_id: ""
      agent_instance: !AgentInstance
    out:
      success: True

  unassign_data_agent:
    in:
      data_agent_id: ""
      data_source_id: ""
    out:
      success: True

  # -----------------
  # The following operations register different types of data producers

  register_data_source:
    docstring: Register an existing data source as data producer
    in:
      data_source_id: ""
    out:
      data_producer_id: ""

  unregister_data_source:
    in:
      data_source_id: ""
    out:
      success: True

  register_process:
    docstring: Register an existing data process as data producer
    in:
      data_process_id: ""
    out:
      data_producer_id: ""

  unregister_process:
    in:
      data_process_id: ""
    out:
      success: True

  register_instrument:
    docstring: Register an existing instrument as data producer
    in:
      instrument_id: ""
    out:
      data_producer_id: ""

  unregister_instrument:
    in:
      instrument_id: ""
    out:
      success: True

  # -----------------
  # The following operations work directly on data producers (use boilerplate instead)

  create_data_producer:
    in:
      data_producer: !DataProducer
    out:
      data_producer_id: ""
    throws:
      BadRequest: if object passed has _id or _rev attribute

  update_data_producer:
    in:
      data_producer: !DataProducer
    out:
    throws:
      BadRequest: if object does not have _id or _rev attribute
      NotFound: object with specified id does not exist
      Conflict: object not based on latest persisted object version

  read_data_producer:
    in:
      data_producer_id: ""
    out:
      data_producer: !DataProducer
    throws:
      NotFound: object with specified id does not exist

  delete_data_producer:
    in:
      data_producer_id: ""
    out:
    throws:
      NotFound: object with specified id does not exist
